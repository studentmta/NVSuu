///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'PhieuXuat'
// Generated by LLBLGen v1.3.5996.26197 Final on: Tuesday, August 28, 2018, 8:58:16 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace QLKho
{
	/// <summary>
	/// Purpose: Data Access class for the table 'PhieuXuat'.
	/// </summary>
	public partial class clsPhieuXuat : clsDBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bTonTai;
			private SqlInt32		m_iID_PhieuXuat, m_iID_Kho;
			private SqlString		m_sNguoi_PheDuyet, m_sNguoi_Lap, m_sSo_PhieuXuat;
			private SqlDateTime		m_daNgay_PheDuyet, m_daNgay_Lap, m_daNgay_XuatKho, m_daNgay_HachToan, m_daNgayLV;
			private SqlByte			m_byTrangThai;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public clsPhieuXuat()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_Kho</LI>
		///		 <LI>So_PhieuXuat</LI>
		///		 <LI>Ngay_XuatKho</LI>
		///		 <LI>Ngay_HachToan. May be SqlDateTime.Null</LI>
		///		 <LI>Nguoi_Lap</LI>
		///		 <LI>Ngay_Lap</LI>
		///		 <LI>Nguoi_PheDuyet. May be SqlString.Null</LI>
		///		 <LI>Ngay_PheDuyet. May be SqlDateTime.Null</LI>
		///		 <LI>TrangThai</LI>
		///		 <LI>TonTai</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID_PhieuXuat</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_PhieuXuat_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@ID_Kho", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_Kho));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@So_PhieuXuat", SqlDbType.NVarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSo_PhieuXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Ngay_XuatKho", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgay_XuatKho));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Ngay_HachToan", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgay_HachToan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Nguoi_Lap", SqlDbType.NVarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNguoi_Lap));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Ngay_Lap", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgay_Lap));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Nguoi_PheDuyet", SqlDbType.NVarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNguoi_PheDuyet));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Ngay_PheDuyet", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgay_PheDuyet));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@TrangThai", SqlDbType.TinyInt, 1, ParameterDirection.Input, false, 3, 0, "", DataRowVersion.Proposed, m_byTrangThai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@TonTai", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTonTai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@ID_PhieuXuat", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iID_PhieuXuat));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iID_PhieuXuat = (SqlInt32)scmCmdToExecute.Parameters["@ID_PhieuXuat"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsPhieuXuat::Insert::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_PhieuXuat</LI>
		///		 <LI>ID_Kho</LI>
		///		 <LI>So_PhieuXuat</LI>
		///		 <LI>Ngay_XuatKho</LI>
		///		 <LI>Ngay_HachToan. May be SqlDateTime.Null</LI>
		///		 <LI>Nguoi_Lap</LI>
		///		 <LI>Ngay_Lap</LI>
		///		 <LI>Nguoi_PheDuyet. May be SqlString.Null</LI>
		///		 <LI>Ngay_PheDuyet. May be SqlDateTime.Null</LI>
		///		 <LI>TrangThai</LI>
		///		 <LI>TonTai</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_PhieuXuat_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@ID_PhieuXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_PhieuXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@ID_Kho", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_Kho));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@So_PhieuXuat", SqlDbType.NVarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSo_PhieuXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Ngay_XuatKho", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgay_XuatKho));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Ngay_HachToan", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgay_HachToan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Nguoi_Lap", SqlDbType.NVarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNguoi_Lap));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Nguoi_PheDuyet", SqlDbType.NVarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNguoi_PheDuyet));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@Ngay_PheDuyet", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgay_PheDuyet));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@TrangThai", SqlDbType.TinyInt, 1, ParameterDirection.Input, false, 3, 0, "", DataRowVersion.Proposed, m_byTrangThai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@TonTai", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTonTai));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsPhieuXuat::Update::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_PhieuXuat</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_PhieuXuat_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@ID_PhieuXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_PhieuXuat));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsPhieuXuat::Delete::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_PhieuXuat</LI>
		/// </UL>
		///		 <LI>ID_PhieuXuat</LI>
		///		 <LI>ID_Kho</LI>
		///		 <LI>So_PhieuXuat</LI>
		///		 <LI>Ngay_XuatKho</LI>
		///		 <LI>Ngay_HachToan</LI>
		///		 <LI>Nguoi_Lap</LI>
		///		 <LI>Ngay_Lap</LI>
		///		 <LI>Nguoi_PheDuyet</LI>
		///		 <LI>Ngay_PheDuyet</LI>
		///		 <LI>TrangThai</LI>
		///		 <LI>TonTai</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_PhieuXuat_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("PhieuXuat");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@ID_PhieuXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_PhieuXuat));

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				if(dtToReturn.Rows.Count > 0)
				{
					m_iID_PhieuXuat = (Int32)dtToReturn.Rows[0]["ID_PhieuXuat"];
					m_iID_Kho = (Int32)dtToReturn.Rows[0]["ID_Kho"];
					m_sSo_PhieuXuat = (string)dtToReturn.Rows[0]["So_PhieuXuat"];
					m_daNgay_XuatKho = (DateTime)dtToReturn.Rows[0]["Ngay_XuatKho"];
					m_daNgay_HachToan = dtToReturn.Rows[0]["Ngay_HachToan"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["Ngay_HachToan"];
					m_sNguoi_Lap = (string)dtToReturn.Rows[0]["Nguoi_Lap"];
					m_daNgay_Lap = (DateTime)dtToReturn.Rows[0]["Ngay_Lap"];
					m_sNguoi_PheDuyet = dtToReturn.Rows[0]["Nguoi_PheDuyet"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Nguoi_PheDuyet"];
					m_daNgay_PheDuyet = dtToReturn.Rows[0]["Ngay_PheDuyet"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["Ngay_PheDuyet"];
					m_byTrangThai = (byte)dtToReturn.Rows[0]["TrangThai"];
					m_bTonTai = (bool)dtToReturn.Rows[0]["TonTai"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsPhieuXuat::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_PhieuXuat_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("PhieuXuat");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{

				if(m_bMainConnectionIsCreatedLocal)
				{
					// Open connection.
					m_scoMainConnection.Open();
				}
				else
				{
					if(m_cpMainConnectionProvider.IsTransactionPending)
					{
						scmCmdToExecute.Transaction = m_cpMainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsPhieuXuat::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(m_bMainConnectionIsCreatedLocal)
				{
					// Close connection.
					m_scoMainConnection.Close();
				}
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 ID_PhieuXuat
		{
			get
			{
				return m_iID_PhieuXuat;
			}
			set
			{
				SqlInt32 iID_PhieuXuatTmp = (SqlInt32)value;
				if(iID_PhieuXuatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iD_PhieuXuat", "iD_PhieuXuat can't be NULL");
				}
				m_iID_PhieuXuat = value;
			}
		}


		public SqlInt32 ID_Kho
		{
			get
			{
				return m_iID_Kho;
			}
			set
			{
				SqlInt32 iID_KhoTmp = (SqlInt32)value;
				if(iID_KhoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iD_Kho", "iD_Kho can't be NULL");
				}
				m_iID_Kho = value;
			}
		}


		public SqlString So_PhieuXuat
		{
			get
			{
				return m_sSo_PhieuXuat;
			}
			set
			{
				SqlString sSo_PhieuXuatTmp = (SqlString)value;
				if(sSo_PhieuXuatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("so_PhieuXuat", "so_PhieuXuat can't be NULL");
				}
				m_sSo_PhieuXuat = value;
			}
		}


		public SqlDateTime Ngay_XuatKho
		{
			get
			{
				return m_daNgay_XuatKho;
			}
			set
			{
				SqlDateTime daNgay_XuatKhoTmp = (SqlDateTime)value;
				if(daNgay_XuatKhoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ngay_XuatKho", "ngay_XuatKho can't be NULL");
				}
				m_daNgay_XuatKho = value;
			}
		}


		public SqlDateTime Ngay_HachToan
		{
			get
			{
				return m_daNgay_HachToan;
			}
			set
			{
				m_daNgay_HachToan = value;
			}
		}


		public SqlString Nguoi_Lap
		{
			get
			{
				return m_sNguoi_Lap;
			}
			set
			{
				SqlString sNguoi_LapTmp = (SqlString)value;
				if(sNguoi_LapTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("nguoi_Lap", "nguoi_Lap can't be NULL");
				}
				m_sNguoi_Lap = value;
			}
		}


		public SqlDateTime Ngay_Lap
		{
			get
			{
				return m_daNgay_Lap;
			}
			set
			{
				SqlDateTime daNgay_LapTmp = (SqlDateTime)value;
				if(daNgay_LapTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ngay_Lap", "ngay_Lap can't be NULL");
				}
				m_daNgay_Lap = value;
			}
		}


		public SqlString Nguoi_PheDuyet
		{
			get
			{
				return m_sNguoi_PheDuyet;
			}
			set
			{
				m_sNguoi_PheDuyet = value;
			}
		}


		public SqlDateTime Ngay_PheDuyet
		{
			get
			{
				return m_daNgay_PheDuyet;
			}
			set
			{
				m_daNgay_PheDuyet = value;
			}
		}

        public SqlDateTime NgayLV
        {
            get
            {
                return m_daNgayLV;
            }
            set
            {
                SqlDateTime m_daNgayLVTmp = (SqlDateTime)value;
                if (m_daNgayLVTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("m_daNgayLV", "m_daNgayLV can't be NULL");
                }
                m_daNgayLV = value;
            }
        }

		public SqlByte TrangThai
		{
			get
			{
				return m_byTrangThai;
			}
			set
			{
				SqlByte byTrangThaiTmp = (SqlByte)value;
				if(byTrangThaiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("trangThai", "trangThai can't be NULL");
				}
				m_byTrangThai = value;
			}
		}


		public SqlBoolean TonTai
		{
			get
			{
				return m_bTonTai;
			}
			set
			{
				SqlBoolean bTonTaiTmp = (SqlBoolean)value;
				if(bTonTaiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("tonTai", "tonTai can't be NULL");
				}
				m_bTonTai = value;
			}
		}
		#endregion
	}
}
